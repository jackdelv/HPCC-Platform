#!/bin/bash

usage() {
  echo "Usage: check_executes [options] -- cmd args"
  echo "    -d <directory>     Mounted directory to store post-mortem info in"
  echo "    -f <file>          Specifies a file to preserve on post-mortem"
}

PMD_DIRECTORYBASE=$(pwd)
PMD_PROGNAME=
PMD_COPYFILES=()
PMD_DALISERVER=
PMD_WORKUNIT=
PMD_ALWAYS=false

while [ "$#" -gt 0 ]; do
  arg=$1
  if [[ ${arg:0:1} == '-' ]]; then
    case "${arg:1:1}" in
      -) shift
         PMD_PROGNAME=$1
         shift
         break
         ;;
      d) shift;
         PMD_DIRECTORYBASE=$1
         ;;
      f) shift;
         PMD_COPYFILES+=($1)
         ;;
      a) PMD_ALWAYS=true
         ;;
      *) usage
         exit
         ;;
    esac
  else
    usage
    exit
  fi
  shift
done

if [[ -z ${PMD_PROGNAME} ]] ; then
  usage
  exit
fi

# Scan managed process parameters for additional information
for (( arg=1; arg <= "$#"; arg++ )); do
  optname=${!arg%=*}
  optval=${!arg#*=}
  if [[ ${optname} == '--config' ]]; then
    PMD_COPYFILES+=(${optval})
  elif [[ ${optname} == '--daliServers' ]]; then
    PMD_DALISERVER=${optval}
  elif [[ ${optname} == '--workunit' ]]; then
    PMD_WORKUNIT=${optval}
  fi
done

ulimit -c unlimited

function cleanup {
  echo "EXIT via signal for $progPid"
  if [ -n "$progPid" ]; then
    kill $progPid
    wait $progPid
    retVal=$?
  fi
}

# Ensure any signals to the script kill the child process
# NB: do not include SIGEXIT since when handled, it will cause the script to exit prematurely.
trap cleanup SIGTERM SIGINT SIGABRT SIGQUIT SIGHUP

# Execute the main program, defaulting postmortem logging on (can be overriden by program's config file)
${PMD_PROGNAME} --logging.postMortem=1000 "$@" &
progPid=$!

echo "Waiting for child process $progPid"
# If the signal handler (cleanup) was called, it will wait and catpure retVal and cause this 'wait $progPid' to exit on completion.
# NB: If the signal handler itself doesn't wait, then it will still cause this statement to complete before the child process has exited.
wait $progPid
retVal2=$?
if [ ! -v retVal ]; then
  retVal=$retVal2
fi
echo "Child process $progPid has exited with exit code $retVal"

# If it did not exit cleanly, copy some post-mortem info
if [ $PMD_ALWAYS = true ] || [ $retVal -ne 0 ]; then
  POST_MORTEM_DIR=${PMD_DIRECTORYBASE}/$(hostname)/$(date -Iseconds)
  mkdir -p ${POST_MORTEM_DIR}
  echo "Post-mortem info gathered in $POST_MORTEM_DIR"
  echo "Process exited with code $retVal" | tee $POST_MORTEM_DIR/info.log
  for f in ${PMD_COPYFILES[@]}; do
    mkdir -p $POST_MORTEM_DIR/$(dirname $f)  
    cp $f $POST_MORTEM_DIR/$f
    echo "Copied $f to $POST_MORTEM_DIR/$f" | tee -a $POST_MORTEM_DIR/info.log
  done
  cp `ls -rt /tmp/postmortem.$progPid.log.*` $POST_MORTEM_DIR
  rm /tmp/postmortem.$progPid.log.*

  readarray -t core_files < <(find . -maxdepth 1 -type f -name 'core*' -print)
  # we only expect one, but cater for multiple
  if [[ ${#core_files[@]} -gt 0 ]]; then
    for file in "${core_files[@]}"; do
      echo "Generating info from core file($file) to $POST_MORTEM_DIR/info.log" | tee -a $POST_MORTEM_DIR/info.log
      gdb -batch -ix /opt/HPCCSystems/bin/.gdbinit -x /opt/HPCCSystems/bin/post-mortem-gdb ${PMD_PROGNAME} $file 2>$POST_MORTEM_DIR/info.err >>$POST_MORTEM_DIR/info.log
      echo "Generated info from core file($file)" | tee -a $POST_MORTEM_DIR/info.log
      rm $file
    done
  fi
  dmesg -xT > $POST_MORTEM_DIR/dmesg.log
  if [[ -n "${PMD_DALISERVER}" ]] && [[ -n "${PMD_WORKUNIT}" ]]; then
    if [[ -s wuid ]]; then # takes precedence over command line option
      PMD_WORKUNIT=$(cat wuid)
    fi
    wutool postmortem ${PMD_WORKUNIT} DALISERVER=${PMD_DALISERVER} PMD=${POST_MORTEM_DIR}
    echo Updated workunit ${PMD_WORKUNIT}
  fi
else
  echo "Process exited cleanly (code=0)"
fi
trap - EXIT
exit $retVal


